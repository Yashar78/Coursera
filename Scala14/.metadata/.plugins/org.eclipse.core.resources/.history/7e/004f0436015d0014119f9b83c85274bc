package week6



object test {
	val x = Array(1,2,3,44)
	x map ( x => 2 *x )
	val s = "Hello World"
	s filter (c => c.isUpper)
	
	s exists (c => c.isUpper)
	s forall (c => c.isUpper)
	
	val pairs = List(1,2,3) zip s
	pairs.unzip
	
	s.flatMap(c => List('.',c))
	(1 to 10)
	val M = 6
	val N = 5
  (1 to M) flatMap (x => List(x) zip (1 to N))
  
   (1 to M) flatMap (x => (1 to N) map (y => (x,y)))
	def scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =
		(xs zip ys).map(xy => xy._1 * xy._2).sum
  def scalarProduct2(xs: Vector[Double], ys: Vector[Double]): Double =
		(xs zip ys).map{case (x,y)=> (x * y)}.sum
	
	def isPrime(n: Int): Boolean =
		(2 until n) map (x => n %x) notExists (y => y==0)
		
		isPrime(4)
}