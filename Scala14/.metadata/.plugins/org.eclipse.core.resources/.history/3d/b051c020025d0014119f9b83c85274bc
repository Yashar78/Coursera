package week6



object test {
	val x = Array(1,2,3,44)                   //> x  : Array[Int] = Array(1, 2, 3, 44)
	x map ( x => 2 *x )                       //> res0: Array[Int] = Array(2, 4, 6, 88)
	val s = "Hello World"                     //> s  : String = Hello World
	s filter (c => c.isUpper)                 //> res1: String = HW
	
	s exists (c => c.isUpper)                 //> res2: Boolean = true
	s forall (c => c.isUpper)                 //> res3: Boolean = false
	
	val pairs = List(1,2,3) zip s             //> pairs  : List[(Int, Char)] = List((1,H), (2,e), (3,l))
	pairs.unzip                               //> res4: (List[Int], List[Char]) = (List(1, 2, 3),List(H, e, l))
	
	s.flatMap(c => List('.',c))               //> res5: String = .H.e.l.l.o. .W.o.r.l.d
	(1 to 10)                                 //> res6: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7
                                                  //| , 8, 9, 10)
	val M = 6                                 //> M  : Int = 6
	val N = 5                                 //> N  : Int = 5
  (1 to M) flatMap (x => List(x) zip (1 to N))    //> res7: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((1,1), (2,1
                                                  //| ), (3,1), (4,1), (5,1), (6,1))
  
   (1 to M) flatMap (x => (1 to N) map (y => (x,y)))
                                                  //> res8: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((1,1), (1,2
                                                  //| ), (1,3), (1,4), (1,5), (2,1), (2,2), (2,3), (2,4), (2,5), (3,1), (3,2), (3,
                                                  //| 3), (3,4), (3,5), (4,1), (4,2), (4,3), (4,4), (4,5), (5,1), (5,2), (5,3), (5
                                                  //| ,4), (5,5), (6,1), (6,2), (6,3), (6,4), (6,5))
	def scalarProduct(xs: Vector[Double], ys: Vector[Double]): Double =
		(xs zip ys).map(xy => xy._1 * xy._2).sum
                                                  //> scalarProduct: (xs: Vector[Double], ys: Vector[Double])Double
  def scalarProduct2(xs: Vector[Double], ys: Vector[Double]): Double =
		(xs zip ys).map{case (x,y)=> (x * y)}.sum
                                                  //> scalarProduct2: (xs: Vector[Double], ys: Vector[Double])Double
	
	def isPrime(n: Int): Boolean =
		(2 until n) map (x => n %x) exists (y => y==0)
                                                  //> isPrime: (n: Int)Boolean
		
		isPrime(4)                        //> res9: Boolean = true
		
		!(( 2 until 4) map(x => 4 % x) exists (y => y==0))
                                                  //> res10: Boolean = false
}