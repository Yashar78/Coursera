object books {
	case class Book(title: String, authors: List[String])
	val books:List[Book]=List(Book(title="Structure and Interpretation of Computer Programs",authors
=
List
(
"Abelson, Harald"
,
"Sussman, Gerald J."
)),
Book
(
title
=
"Introduction to Functional Programming"
,
authors
=
List
(
"Bird, Richard"
,
"Wadler, Phil"
)),
Book
(
title
=
"Effective Java"
,
authors
=
List
(
"Bloch, Joshua"
)),
Book
(
title
=
"Java Puzzlers"
,
authors
=
List
(
"Bloch, Joshua"
,
"Gafter, Neal"
)),
Book
(
title
=
"Programming in Scala"
,
authors
=
List
(
"Odersky, Martin"
,
"Spoon, Lex"
,
"Venners, Bill"
)))                                               //> books  : List[books.Book] = List(Book(Structure and Interpretation of Comput
                                                  //| er Programs,List(Abelson, Harald, Sussman, Gerald J.)), Book(Introduction to
                                                  //|  Functional Programming,List(Bird, Richard, Wadler, Phil)), Book(Effective J
                                                  //| ava,List(Bloch, Joshua)), Book(Java Puzzlers,List(Bloch, Joshua, Gafter, Nea
                                                  //| l)), Book(Programming in Scala,List(Odersky, Martin, Spoon, Lex, Venners, Bi
                                                  //| ll)))
for( b <- books; a <- b.authors if a startsWith "Bird,")
 	yield b.title                             //> res0: List[String] = List(Introduction to Functional Programming)
 	
 	
 	
(for(b <- books; a <- b.authors ) yield (a,b.title)).groupBy(w => w)
                                                  //> res1: scala.collection.immutable.Map[(String, String),List[(String, String)]
                                                  //| ] = Map((Bloch, Joshua,Effective Java) -> List((Bloch, Joshua,Effective Java
                                                  //| )), (Bloch, Joshua,Java Puzzlers) -> List((Bloch, Joshua,Java Puzzlers)), (V
                                                  //| enners, Bill,Programming in Scala) -> List((Venners, Bill,Programming in Sca
                                                  //| la)), (Abelson, Harald,Structure and Interpretation of Computer Programs) ->
                                                  //|  List((Abelson, Harald,Structure and Interpretation of Computer Programs)), 
                                                  //| (Gafter, Neal,Java Puzzlers) -> List((Gafter, Neal,Java Puzzlers)), (Spoon, 
                                                  //| Lex,Programming in Scala) -> List((Spoon, Lex,Programming in Scala)), (Wadle
                                                  //| r, Phil,Introduction to Functional Programming) -> List((Wadler, Phil,Introd
                                                  //| uction to Functional Programming)), (Sussman, Gerald J.,Structure and Interp
                                                  //| retation of Computer Programs) -> List((Sussman, Gerald J.,Structure and Int
                                                  //| erpretation of Computer Programs)), (Bird, Richard,Introduction to Functiona
                                                  //| l Programming) -> List((
                                                  //| Output exceeds cutoff limit.
 	
}