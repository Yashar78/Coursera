names(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit <- glm(chd ~ age+alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(fit)
trainErr <- missClass(trainSA$chd , predit(fit))
trainErr <- missClass(trainSA$chd , predict(fit))
trainErr
testErr <- missClass(testSA$chd , predict(fit , newdata=testSA))
testErr
library(tree)
names(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
treeFit <- tree(Area ~ . , data=olive)
summary(treeFit)
plot(treeFit)
text(treeFit)
newdata1 = as.data.frame(t(colMeans(olive)))
predResult <- predict(treeFit , newdata=newdata1 )
predResult
newdata1
olive
View(olive)
View(olive)
partition.tree(treeFit, label="Area", add=T)
partition.tree(treeFit, label="Species", add=T)
plot(olive$Eicosenoic , olive$Linoleic,pch = 19 , col = as.numeric(olive$Area))
partition.tree(treeFit, label="Area", add=T)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit <- glm(chd ~ age+alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
fit <- glm(chd ~ alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(fit)
trainErr <- missClass(trainSA$chd , predict(fit))
testErr <- missClass(testSA$chd , predict(fit , newdata=testSA))
trainErr
testErr
trainErr <- missClass(trainSA$chd , predict(fit, scale="response"))
testErr <- missClass(testSA$chd , predict(fit , newdata=testSA, scale="response"))
trainErr
fit <- glm(chd ~ age+alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(fit)
trainErr <- missClass(trainSA$chd , predict(fit, scale="response"))
testErr <- missClass(testSA$chd , predict(fit , newdata=testSA, scale="response"))
trainErr
testErr
trainErr <- missClass(trainSA$chd , predict(fit, type="response"))
testErr <- missClass(testSA$chd , predict(fit , newdata=testSA, type="response"))
trainErr
testErr
exp(0.2597403)
library(DAAG)
# chapter 11 from data analysis in R
if !library(DAAG){
install.packages('DAAG')
}
else
{
cat("Package already exists.")
}
if (library(DAAG)==F){
install.packages('DAAG')
}
else
{
cat("Package already exists.")
}
if (!library(DAAG)){
install.packages('DAAG')
}
else
{
cat("Package already exists.")
}
spam7
dim(spam7)
head(spam7)
spam.sample <- spam7[sample(seq(1,4601),500,replace=FALSE), ]
boxplot(split(spam.sample$crl.tot , spam.sample$yesno))
?split
boxplot(split(spam.sample$crl.tot , spam.sample$yesno))
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
sapply(xg, length)
sapply(xg, mean)
g
sqrt(as.numeric(g))
fix(x)
xg
sg[1]
xg[1]
g
boxplot(split(spam.sample, spam.sample$yesno))
boxplot(split(spam.sample$crl.tot, spam.sample$yesno))
boxplot(split(log(spam.sample$crl.tot), spam.sample$yesno))
library(rpart)
spart.rpart <- rpart(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
spam.rpart <- rpart(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
plot(spam.rpart)
text(spam.rpart)
spam.rpart <- tree(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
plot(spam.rpart)
text(spam.rpart)
spam.rpart <- tree(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
plot(spam.rpart)
text(spam.rpart)
library(tree)
spam.rpart <- tree(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
plot(spam.rpart)
text(spam.rpart)
printcp(spam.rpart)
spam.rpart <- rpart(formula= yesno ~ crl.tot + dollar + bang + money + n000 + make, method="class", data=spam7)
plot(spam.rpart)
text(spam.rpart)
printcp(spam.rpart)
?boxplot
dt(-20,99)
?dt
dt(0,99)
qt(0,99)
rt(0,99)
pt(0,99)
pt(-20,99)
pt(-0.13,129)
pnorm(2.4,mean=0,var=1)
pnorm(2.4,0,1)
1-pnorm(2.4,0,1)
2*(1-pnorm(2.4,0,1))
pnorm(mean=0,sd=1,0.01)
qnorm(mean=0,sd=1,0.01)
qnorm(mean=0,sd=1,0.2)
0.42-qnorm(mean=0,sd=1,0.01)*(0.07/1.96)
0.42-abs(qnorm(mean=0,sd=1,0.01))*(0.07/1.96)
0.42+abs(qnorm(mean=0,sd=1,0.01))*(0.07/1.96)
0.42-abs(qnorm(mean=0,sd=1,0.02))*(0.07/1.96)
0.42-abs(qnorm(mean=0,sd=1,0.2))*(0.07/1.96)
0.42+abs(qnorm(mean=0,sd=1,0.2))*(0.07/1.96)
0.42+abs(qnorm(mean=0,sd=1,0.1))*(0.07/1.96)
0.42+abs(qnorm(mean=0,sd=1,0.005))*(0.07/1.96)
12.8/(11.2/sqrt(50))
pt(df=49,q=8.08)
qt(df=49,q=8.08)
qt(df=49)
pt(df=49,q=8.08)
pt(df=49,q=-8.08)
2*pt(df=49,q=-8.08)
0.45*(0.55)/560+0.52*0.48/1100
-0.07-1.96*sqrt(0.45*(0.55)/560+0.52*0.48/1100)
-0.07+1.96*sqrt(0.45*(0.55)/560+0.52*0.48/1100)
(0.45*500+0.52*1100)/1600
-0.07/(sqrt(0.496*(1/500+1/1100)))
-0.07/(sqrt(0.496*(1-0.496)(1/500+1/1100)))
-0.07/(sqrt(0.496*(1-0.496)*(1/500+1/1100)))
sqrt(38.7*38.7/30+23.2*23.2/50)
(38.7*38.7/30+23.2*23.2/50)
(38.7/30+23.2/50)
(73.1-76.0)+2.01*sqrt(1.754)
(73.1-76.0)-2.01*sqrt(1.754)
(0.52-0.68)+1.96*sqrt(0.68*(1-0.68)/1000+0.52*0.48/2000)
(0.52-0.68)-1.96*sqrt(0.68*(1-0.68)/1000+0.52*0.48/2000)
P = (680+1040)/3000
P
0.16/(sqrt(P*(1-P)*(1/1000+1/2000)))
-10+1.96*sqrt(100/250+150/400)
-10-1.96*sqrt(100/250+150/400)
s2 = (250*100+400*150)/650
s2
10/sqrt(s2)
s2 = (249*100+399*150)/648
s2
10/sqrt(s2/250+s2/400)
0.03+1.96*sqrt(0.55*0.45/100+0.42*0.48/200)
-0.03+1.96*sqrt(0.55*0.45/100+0.42*0.48/200)
-0.03+1.96*sqrt(0.55*0.45/100+0.42*0.58/200)
-0.13+1.96*sqrt(0.55*0.45/100+0.42*0.58/200)
-0.1311.96*sqrt(0.55*0.45/100+0.42*0.58/200)
-0.13-1.96*sqrt(0.55*0.45/100+0.42*0.58/200)
(10/25+15/80)^2
(10/25+15/80)^2/(((10/25)^2)/(24)+(15/80)^2/(79))
10+2.68*sqrt(10/25+15/80)
10-2.68*sqrt(10/25+15/80)
source("http://bioconductor.org/biocLite.R")
biocLite("graph")
install.packages("gRain")
help(gRain)
help("gRain")
help(package="gRain")
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[1:5]
userData
names(userData)
m <- regexpr("X[1-9]+", perl=TRUE)
x <- c("X565..223")
regmatches(x,m)
x <- c("X565..223")
m <- regexpr("X[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- c("X565..X223")
m <- regexpr("X[1-9]+",x, perl=TRUE)
regmatches(x,m)
x
m <- regexpr("X[1-9]+",x, perl=TRUE)
m
regmatches(x,m)
m <- regexpr("X[1-9]",x, perl=TRUE)
regmatches(x,m)
m <- regexpr("Y[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- c("X565..X223")
m <- regexpr("X[1-9]+",x, perl=TRUE)
regmatches(x,m)
m <- gregexpr("X[1-9]+",x, perl=TRUE)
regmatches(x,m)
m <- gregexpr("^X[1-9]+",x, perl=TRUE)
regmatches(x,m)
names(withStarWars)
x <- names(withStarWars)#c("X565..X223")
m <- gregexpr("^X[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("^X[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("^[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
regmatches(x,m)
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
names(withStarWars)
withStarWars
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[2:6]
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
withStarWars
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
x <- names(countValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countValues) <- regmatches(x,m)
countValues
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
x <- names(countValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countValues) <- regmatches(x,m)
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
x <- names(countHighRates)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countHighRates) <- regmatches(x,m)
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[2:6]
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
?write.csv
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
write.csv(names(meanValues), file="meanvalues.csv", colnames=FALSE)
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
write.csv(names(meanValues), file="meanvalues.csv", colnames=FALSE)
write.csv(names(meanValues), file="meanvalues.csv", col.names=FALSE)
write.csv(names(meanValues), file="meanvalues.csv", col.names=FALSE, row.names=FALSE)
write.csv(names(meanValues), file="meanvalues.csv", col.names=FALSE, row.names=FALSE, quote=FALSE)
write.csv(names(meanValues), file="meanvalues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
names(meanValues)
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
write.csv(names(meanValues), file="meanValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
x <- names(countValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countValues) <- regmatches(x,m)
write.csv(names(countValues), file="countValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
x <- names(countHighRates)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countHighRates) <- regmatches(x,m)
write.csv(names(countHighRates), file="countHighRates.csv", col.names=F,
row.names=FALSE, quote=FALSE )
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[2:6]
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
write.csv(names(withStarWars), file="countHighEithStars.csv", col.names=F,
row.names=FALSE, quote=FALSE )
write.csv(names(withStarWars), file="countHighEithStars.csv", colnames=F,
row.names=FALSE, quote=FALSE )
write.csv(names(withStarWars), file="countHighEithStars.csv", colnames=NA,
row.names=FALSE, quote=FALSE )
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
write.table(names(meanValues), file="meanValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
x <- names(countValues)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countValues) <- regmatches(x,m)
write.table(names(countValues), file="countValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
x <- names(countHighRates)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(countHighRates) <- regmatches(x,m)
write.table(names(countHighRates), file="countHighRates.csv", col.names=F,
row.names=FALSE, quote=FALSE )
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[2:6]
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[1-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
write.table(names(withStarWars), file="countHighEithStars.csv", col.names=FALSE,
row.names=FALSE, quote=FALSE )
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues
sort(meanValues, decreasing=TRUE)
# recommenation assignemnt 2
# read the data
setwd("/Users/rahimdelaviz/Coursera/Recommendation/assignments/module2/assign2")
userData <- read.csv("recsys_data_WA 1 Rating Matrix.csv", header=TRUE)
#find top 5 movies by mean
meanValues <- sapply(userData[, -1], FUN=mean, na.rm= TRUE)
meanValues <- sort(meanValues, decreasing=TRUE)[c(1:5)]
x <- names(meanValues)#c("X565..X223")
m <- regexpr("[0-9]+",x, perl=TRUE)
names(meanValues) <- regmatches(x,m)
write.table(names(meanValues), file="meanValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countN <- function ( v ) {
length ( v ) - sum ( is.na ( v ) )
}
countValues <- sapply(userData[, -1], FUN=countN )
countValues <- sort(countValues, decreasing=TRUE)[c(1:5)]
x <- names(countValues)#c("X565..X223")
m <- regexpr("[0-9]+",x, perl=TRUE)
names(countValues) <- regmatches(x,m)
write.table(names(countValues), file="countValues.csv", col.names=F,
row.names=FALSE, quote=FALSE )
countHighRatesPercent <- function (v, minRate){
nonNa <- length(v) - sum(is.na(v))
higherThanMin <- sum(v>=minRate, na.rm=T)
return (100*higherThanMin / nonNa)
}
countHighRates <- sapply(userData[, -1], FUN=countHighRatesPercent , minRate=4 )
countHighRates <- sort(countHighRates, decreasing=TRUE)[c(1:5)]
x <- names(countHighRates)#c("X565..X223")
m <- regexpr("[0-9]+",x, perl=TRUE)
names(countHighRates) <- regmatches(x,m)
write.table(names(countHighRates), file="countHighRates.csv", col.names=F,
row.names=FALSE, quote=FALSE )
starWarsAss <- function (v, starWars ){
return (100*sum(!is.na(v) & !is.na(starWars))/sum(!is.na(starWars)))
}
withStarWars <- sapply(userData[, -1], FUN=starWarsAss, starWars=userData[,2])
withStarWars <- sort(withStarWars, decreasing=TRUE)[2:6]
x <- names(withStarWars)#c("X565..X223")
m <- regexpr("[0-9]+",x, perl=TRUE)
names(withStarWars) <- regmatches(x,m)
write.table(names(withStarWars), file="countHighEithStars.csv", col.names=FALSE,
row.names=FALSE, quote=FALSE )
